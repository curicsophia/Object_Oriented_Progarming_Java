Inheritance is a mechanism where  the child class inherits fields and methods from the parent class.
The child instance can be used in places where the parent instance is required.

Encapsulation is a mechanism that binds together code and the data it manipulates in a single unit.
If the data fields are made private you cannot access them and only the class methods can modify them.
This protects the data form incorrect useage.

Compile time polymorphism which is also known as static polymorphism.
This type of polymorphism is achieved by method overloading or operator overloading.
For example a method behaves differently when called with different type parameters.

Runtime polymorphism which is also known as Dynamic Method Dispatch. 
It is a process in which a function call to the overridden method is resolved at Runtime. 
For example using a child instance instead of a parent instance will result in calling the child's method instead of calling the
parent's method.

==================================================================
New edits:

Upcasting
Derived or child types can be converted to parent types.
This feature that enables runtime polymorphism.

Abstract classes
Abstract classes can never be instantiated
They can contain anything a normal class can contain, but can also contain abstract methods. 
An abstract method is a method signature with no implementation used to define interface and hide implementation details
Defined classes: line 91, Shape, Circle, Rect 
Usage: line 170

Interfaces
Interfances allow multiple inheritance. They are purely abstract classes (they can only contain abstract methods)
Defined class: line 39, Animal, Flying, Swimming
Usage: line 181

Dynamic Method Dispatch
Is the mechanism by which the runetime polymorphism is implemented
For example in method "use_animal" line 131,
both animal_static and animal_dynamic are Animal objects but at runtime 
animal_dynamic is revelead to be Dog or Cat object which was upcasted to Animal. 